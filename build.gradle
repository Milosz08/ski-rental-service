plugins {
    id 'java'
    id 'war'
    alias libs.plugins.ssh.gradle
    alias libs.plugins.dotenv.gradle
}

def warFileName = 'ROOT'
def catalinaBase = env.isPresent('CICD_CATALINA_BASE') ? env.CICD_CATALINA_BASE.value : '/opt/tomcat/'
def projectBase = env.isPresent('CICD_PROJECT_BASE') ? env.CICD_PROJECT_BASE.value : 'webapps/ski-rental-service/'

repositories {
    mavenCentral()
}

compileJava.options.encoding = 'UTF-8'
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

java.sourceCompatibility = JavaVersion.VERSION_17
java.targetCompatibility = JavaVersion.VERSION_17

ssh.settings {
    dryRun = project.hasProperty('dryRun')
}

remotes {
    webServer {
        host = env.CICD_HOST.value
        user = env.CICD_USER.value
        identity = file('id_rsa_pem')
        knownHosts = file('known_hosts.dat')
    }
}

// NOTE: all 3rd part libraries in /gradle/libs.versions.toml file

dependencies {
    implementation          libs.jquery
    implementation          libs.popperjs
    implementation          libs.bootstrap
    implementation          libs.bootstrap.icons

    implementation          libs.slf4j
    implementation          libs.slf4j.simple
    implementation          libs.slf4j.liquibase
    implementation          libs.lombok
    implementation          libs.reflections
    implementation          libs.bcrypt
    implementation          libs.freemarker
    implementation          libs.commons.text
    implementation          libs.modelmapper
    implementation          libs.sshj
    implementation          libs.commons.codec
    implementation          libs.commons.validator
    implementation          libs.gson
    implementation          libs.barcode4j
    implementation          libs.itext

    implementation          libs.mysql.driver
    implementation          libs.hibernate.core
    implementation          libs.hibernate.validator
    implementation          libs.liquibase.core
    implementation          libs.hibernate.c3p0

    implementation          libs.jaxb.runtime
    implementation          libs.jakarta.mail
    implementation          libs.jakarta.activation
    implementation          libs.jakarta.xml.bind.api
    implementation          libs.jakarta.servlet.jstl
    implementation          libs.jakarta.servlet.jstl.api
    implementation          libs.jakarta.servlet.jsp.api
    compileOnly             libs.jakarta.servlet.api

    implementation 'org.apache.logging.log4j:log4j-core:2.20.0'

    annotationProcessor     libs.lombok
    testImplementation      libs.junit.api
    testRuntimeOnly         libs.junit.engine
}

configurations.all {
    exclude group: 'org.eclipse.angus', module: 'angus-activation'
}

tasks.register('copyRsa', Copy) {
    from layout.projectDirectory.files([ 'id_rsa', 'known_hosts.dat' ])
    into layout.buildDirectory.dir("resources/main/ssh")
}

processResources {
    filesMatching('**/hibernate.cfg.xml') {
        filter org.apache.tools.ant.filters.ReplaceTokens, tokens: [
                'db_url': env.DB_URL.value,
                'db_user': env.DB_USERNAME.value,
                'db_pass': env.DB_PASSWORD.value,
        ]
    }
    filesMatching('**/mail.cfg.xml') {
        filter org.apache.tools.ant.filters.ReplaceTokens, tokens: [
                'smtp_host': env.SMTP_HOST.value,
                'smtp_user': env.SMTP_USER.value,
                'smtp_pass': env.SMTP_PASS.value,
        ]
    }
    filesMatching('**/ssh.cfg.xml' ) {
        filter org.apache.tools.ant.filters.ReplaceTokens, tokens: [
                'ssh_host': env.SSH_HOST.value,
                'ssh_login': env.SSH_LOGIN.value,
        ]
    }
    dependsOn copyRsa
}

war {
    archiveFileName = "${warFileName}.war"
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    dependsOn processResources
}

task deployToTomcat(dependsOn: war) {
    group = 'deployment'
    def fullPath = "${catalinaBase}${projectBase}"
    doLast {
        ssh.run {
            session(remotes.webServer) {
                execute "sudo rm -rf ${fullPath}*"
                put from: "${buildDir}/libs/${warFileName}.war", into: fullPath
                execute 'sudo systemctl restart tomcat'
            }
        }
    }
}

build.dependsOn processResources
